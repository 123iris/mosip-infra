apiVersion: v1
items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: activemq
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-04-04T16:39:51Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/managed-by: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"activemq"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"ACTIVEMQ_ADMIN_LOGIN"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ACTIVEMQ_ADMIN_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ACTIVEMQ_MAX_MEMORY"}:
                      .: {}
                      f:name: {}
                    k:{"name":"ACTIVEMQ_MIN_MEMORY"}:
                      .: {}
                      f:name: {}
                    k:{"name":"ACTIVEMQ_STORAGE_USAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"ACTIVEMQ_TEMP_USAGE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":61616,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data/activemq"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"q-data"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-04T16:39:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:30:43Z"
    name: activemq
    namespace: default
    resourceVersion: "14561819"
    selfLink: /apis/apps/v1/namespaces/default/deployments/activemq
    uid: 8c5d2415-a659-4203-90de-cc5506aaac4d
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: activemq
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: activemq
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: ACTIVEMQ_MIN_MEMORY
          - name: ACTIVEMQ_MAX_MEMORY
          - name: ACTIVEMQ_STORAGE_USAGE
            value: 16 gb
          - name: ACTIVEMQ_TEMP_USAGE
            value: 8 gb
          - name: ACTIVEMQ_ADMIN_LOGIN
            value: admin
          - name: ACTIVEMQ_ADMIN_PASSWORD
            value: abc123
          image: mosipdev/activemq:1.1.3
          imagePullPolicy: Always
          name: activemq
          ports:
          - containerPort: 61616
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 61616
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data/activemq
            name: q-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: q-data
          persistentVolumeClaim:
            claimName: activemq
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-04T16:39:51Z"
      lastUpdateTime: "2021-04-04T16:40:34Z"
      message: ReplicaSet "activemq-64f469f85f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T21:30:43Z"
      lastUpdateTime: "2021-04-29T21:30:43Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: artifactory-service
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-04-08T17:09:13Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/managed-by: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"artifactory-service"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-08T17:09:13Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T20:38:29Z"
    name: artifactory-service
    namespace: default
    resourceVersion: "14534309"
    selfLink: /apis/apps/v1/namespaces/default/deployments/artifactory-service
    uid: 4eaed3b2-cbb6-4c94-8649-d881bccaacd0
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: artifactory-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: artifactory-service
          exportLogs: enabled
      spec:
        containers:
        - image: mspeagle/artifactory-service:1.3
          imagePullPolicy: Always
          name: artifactory-service
          ports:
          - containerPort: 80
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 80
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-08T17:09:13Z"
      lastUpdateTime: "2021-04-08T17:09:32Z"
      message: ReplicaSet "artifactory-service-75f55cc78d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T20:38:29Z"
      lastUpdateTime: "2021-04-29T20:38:29Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: clamav
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-04-04T16:45:48Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/managed-by: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"clamav"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":3310,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-04T16:45:48Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:42:41Z"
    name: clamav
    namespace: default
    resourceVersion: "14567644"
    selfLink: /apis/apps/v1/namespaces/default/deployments/clamav
    uid: 1a6e000b-a84c-4822-b978-5bd7d07292a0
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: clamav
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: clamav
          exportLogs: enabled
      spec:
        containers:
        - image: mkodockx/docker-clamav:latest
          imagePullPolicy: IfNotPresent
          name: clamav
          ports:
          - containerPort: 3310
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3310
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-04-04T16:45:48Z"
      lastUpdateTime: "2021-04-04T16:46:45Z"
      message: ReplicaSet "clamav-69d9896858" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T21:42:41Z"
      lastUpdateTime: "2021-04-29T21:42:41Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: config-server
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-11T07:01:18Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/managed-by: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"config-server"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"ENCRYPT_KEY"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SPRING_CLOUD_CONFIG_SERVER_GIT_SEARCHPATHS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SPRING_CLOUD_CONFIG_SERVER_GIT_URI"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SPRING_CLOUD_CONFIG_SERVER_OVERRIDES_MOSIPBOX_PUBLIC_URL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":51000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-11T07:01:18Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-11T07:01:45Z"
    name: config-server
    namespace: default
    resourceVersion: "21018119"
    selfLink: /apis/apps/v1/namespaces/default/deployments/config-server
    uid: e1090e82-6093-46ee-abb1-6ed6c60c86d8
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: config-server
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: config-server
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: SPRING_CLOUD_CONFIG_SERVER_GIT_SEARCHPATHS
            value: sandbox
          - name: ENCRYPT_KEY
            value: xyz
          - name: SPRING_CLOUD_CONFIG_SERVER_OVERRIDES_MOSIPBOX_PUBLIC_URL
            value: https://10.0.24.230
          - name: SPRING_CLOUD_CONFIG_SERVER_GIT_URI
            value: https://github.com/Manoprabamp/aws-config.git
          - name: SPRING_CLOUD_CONFIG_SERVER_GIT_USERNAME
            value: tl@madrassecurityprinters.com
          - name: SPRING_CLOUD_CONFIG_SERVER_GIT_PASSWORD
            value: mano@23792
          image: mosipid/sandbox-config-server:1.1.0
          imagePullPolicy: Always
          name: config-server
          ports:
          - containerPort: 51000
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 51000
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-05-11T07:01:45Z"
      lastUpdateTime: "2021-05-11T07:01:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-05-11T07:01:18Z"
      lastUpdateTime: "2021-05-11T07:01:45Z"
      message: ReplicaSet "config-server-6cb8bfdffb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: datashare
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-04-29T21:38:02Z"
    generation: 1
    labels:
      app: datashare-service
      app.kubernetes.io/managed-by: Helm
      component: datashare
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"datashare-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8097,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"logger-sidecar"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"applogs"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-29T21:38:02Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:40:51Z"
    name: datashare-service
    namespace: default
    resourceVersion: "14566457"
    selfLink: /apis/apps/v1/namespaces/default/deployments/datashare-service
    uid: 388a8f29-9e9d-47ea-b7f1-b99a53c26dde
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: datashare-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: datashare-service
          component: datashare
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: is_glowroot_env
            value: absent
          - name: JDK_JAVA_OPTIONS
            value: -Xms2000M -Xmx2000M
          image: mosipid/data-share-service:1.1.4
          imagePullPolicy: Always
          name: datashare-service
          ports:
          - containerPort: 8097
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/datashare/actuator/health
              port: 8097
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 2500M
            requests:
              cpu: 200m
              memory: 2500M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /logs
            name: applogs
        - args:
          - /bin/sh
          - -c
          - tail -F /logs/datashare.log
          image: busybox
          imagePullPolicy: Always
          name: logger-sidecar
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /logs
            name: applogs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: applogs
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-04-29T21:40:51Z"
      lastUpdateTime: "2021-04-29T21:40:51Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-04-29T21:38:02Z"
      lastUpdateTime: "2021-04-29T21:40:51Z"
      message: ReplicaSet "datashare-service-6c555fb47c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"healthcheck-app","namespace":"default"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"healthcheck-app"}},"template":{"metadata":{"labels":{"app":"healthcheck-app"}},"spec":{"containers":[{"env":[{"name":"USERNAME","value":"admin"},{"name":"PASSWORD","value":"password"},{"name":"CACHE_DURATION_IN_SECONDS","value":"30"},{"name":"NODE_ENV","value":"production"},{"name":"EXCLUDE","value":""},{"name":"DEPLOYMENTS_NAMESPACE","value":"default"}],"image":"emrekenci/k8s-healthcheck:v1","imagePullPolicy":"Always","name":"healthcheckappcontainer","ports":[{"containerPort":5000}]}]}}}}
    creationTimestamp: "2021-04-02T11:07:08Z"
    generation: 1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
            f:spec:
              f:containers:
                k:{"name":"healthcheckappcontainer"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"CACHE_DURATION_IN_SECONDS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DEPLOYMENTS_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"EXCLUDE"}:
                      .: {}
                      f:name: {}
                    k:{"name":"NODE_ENV"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"USERNAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":5000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-04-02T11:07:08Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T20:58:43Z"
    name: healthcheck-app
    namespace: default
    resourceVersion: "14542707"
    selfLink: /apis/apps/v1/namespaces/default/deployments/healthcheck-app
    uid: d40f7eab-c4df-4366-8a3a-3aa6842ab212
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: healthcheck-app
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: healthcheck-app
      spec:
        containers:
        - env:
          - name: USERNAME
            value: admin
          - name: PASSWORD
            value: password
          - name: CACHE_DURATION_IN_SECONDS
            value: "30"
          - name: NODE_ENV
            value: production
          - name: EXCLUDE
          - name: DEPLOYMENTS_NAMESPACE
            value: default
          image: emrekenci/k8s-healthcheck:v1
          imagePullPolicy: Always
          name: healthcheckappcontainer
          ports:
          - containerPort: 5000
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T11:07:08Z"
      lastUpdateTime: "2021-04-02T11:07:44Z"
      message: ReplicaSet "healthcheck-app-6fc6d9b86d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T20:58:43Z"
      lastUpdateTime: "2021-04-29T20:58:43Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kernel
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-12T19:17:51Z"
    generation: 1
    labels:
      app: kernel-auditmanager-service
      app.kubernetes.io/managed-by: Helm
      component: kernel
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"kernel-auditmanager-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8081,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-12T19:17:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-12T19:20:37Z"
    name: kernel-auditmanager-service
    namespace: default
    resourceVersion: "21868530"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kernel-auditmanager-service
    uid: 21920ade-255e-40e7-a421-ad89b513d5f2
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 4
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kernel-auditmanager-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kernel-auditmanager-service
          component: kernel
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: JDK_JAVA_OPTIONS
            value: -Xms4000M -Xmx4000M
          image: mosipid/kernel-auditmanager-service:1.1.4
          imagePullPolicy: Always
          name: kernel-auditmanager-service
          ports:
          - containerPort: 8081
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/auditmanager/actuator/health
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 5G
            requests:
              cpu: 500m
              memory: 5G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 4
    conditions:
    - lastTransitionTime: "2021-05-12T19:20:37Z"
      lastUpdateTime: "2021-05-12T19:20:37Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-05-12T19:17:51Z"
      lastUpdateTime: "2021-05-12T19:20:37Z"
      message: ReplicaSet "kernel-auditmanager-service-5886f69d67" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 4
    replicas: 4
    updatedReplicas: 4
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: kernel
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-12T19:17:51Z"
    generation: 29
    labels:
      app: kernel-auth-service
      app.kubernetes.io/managed-by: Helm
      component: kernel
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"kernel-auth-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8091,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-12T19:17:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:template:
            f:spec:
              f:containers:
                k:{"name":"kernel-auth-service"}:
                  f:image: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
      manager: dashboard
      operation: Update
      time: "2021-05-20T08:09:04Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-26T08:25:01Z"
    name: kernel-auth-service
    namespace: default
    resourceVersion: "28999847"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kernel-auth-service
    uid: 2d8be197-e01e-4b82-919d-ce7be1555a91
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 25
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kernel-auth-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kernel-auth-service
          component: kernel
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: JDK_JAVA_OPTIONS
            value: -Xms2500M -Xmx2500M
          image: mspeagle/kernel-auth-service-aws:1.2
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/authmanager/actuator/health
              port: 8091
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: kernel-auth-service
          ports:
          - containerPort: 8091
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/authmanager/actuator/health
              port: 8091
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 3500M
            requests:
              cpu: 500m
              memory: 3G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 25
    conditions:
    - lastTransitionTime: "2021-05-12T19:17:51Z"
      lastUpdateTime: "2021-05-20T08:14:55Z"
      message: ReplicaSet "kernel-auth-service-7b94f674bd" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-26T08:25:01Z"
      lastUpdateTime: "2021-05-26T08:25:01Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 29
    readyReplicas: 25
    replicas: 25
    updatedReplicas: 25
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kernel
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-12T19:17:51Z"
    generation: 1
    labels:
      app: kernel-idgenerator-service
      app.kubernetes.io/managed-by: Helm
      component: kernel
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"kernel-idgenerator-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-12T19:17:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-12T19:18:16Z"
    name: kernel-idgenerator-service
    namespace: default
    resourceVersion: "21867497"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kernel-idgenerator-service
    uid: d2e85c63-c6c6-4546-88e9-287f034db208
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kernel-idgenerator-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kernel-idgenerator-service
          component: kernel
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: JDK_JAVA_OPTIONS
            value: -Xms2000M -Xmx2000M
          image: mosipid/kernel-idgenerator-service:1.1.3.1
          imagePullPolicy: Always
          name: kernel-idgenerator-service
          ports:
          - containerPort: 8080
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 2500M
            requests:
              cpu: 200m
              memory: 2500M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-05-12T19:18:16Z"
      lastUpdateTime: "2021-05-12T19:18:16Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-05-12T19:17:51Z"
      lastUpdateTime: "2021-05-12T19:18:16Z"
      message: ReplicaSet "kernel-idgenerator-service-6c57d97d5d" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kernel
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-12T19:17:51Z"
    generation: 2
    labels:
      app: kernel-keymanager-service
      app.kubernetes.io/managed-by: Helm
      component: kernel
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"kernel-keymanager-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PKCS11_PROXY_SOCKET"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"zip_file_path"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8088,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/opt/nfast/kmdata"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/opt/nfast/sockets"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"ncipher-config"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
                k:{"name":"ncipher-socket"}:
                  .: {}
                  f:hostPath:
                    .: {}
                    f:path: {}
                    f:type: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-12T19:17:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:unavailableReplicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-12T19:40:21Z"
    name: kernel-keymanager-service
    namespace: default
    resourceVersion: "21880448"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kernel-keymanager-service
    uid: dadb014c-2b3e-483d-9958-39ffbe132da5
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 40
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kernel-keymanager-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kernel-keymanager-service
          component: kernel
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: PKCS11_PROXY_SOCKET
            value: tcp://softhsm-keymanager:80
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: zip_file_path
            value: artifactory/libs-release-local/hsm/client.zip
          - name: JDK_JAVA_OPTIONS
            value: -Xms4000M -Xmx4000M
          image: mosipdev/kernel-keymanager-service:1.1.5
          imagePullPolicy: Always
          name: kernel-keymanager-service
          ports:
          - containerPort: 8088
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/keymanager/actuator/health
              port: 8088
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 5G
            requests:
              cpu: 200m
              memory: 5G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /opt/nfast/kmdata
            name: ncipher-config
          - mountPath: /opt/nfast/sockets
            name: ncipher-socket
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: ncipher-config
          persistentVolumeClaim:
            claimName: ncipher-hwsp-pvc
        - hostPath:
            path: /opt/ncipher/socket
            type: ""
          name: ncipher-socket
  status:
    availableReplicas: 38
    conditions:
    - lastTransitionTime: "2021-05-12T19:17:51Z"
      lastUpdateTime: "2021-05-12T19:20:42Z"
      message: ReplicaSet "kernel-keymanager-service-5d9fdcfcd8" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-12T19:37:33Z"
      lastUpdateTime: "2021-05-12T19:37:33Z"
      message: Deployment does not have minimum availability.
      reason: MinimumReplicasUnavailable
      status: "False"
      type: Available
    observedGeneration: 2
    readyReplicas: 38
    replicas: 40
    unavailableReplicas: 2
    updatedReplicas: 40
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kernel
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-12T19:17:51Z"
    generation: 2
    labels:
      app: kernel-masterdata-service
      app.kubernetes.io/managed-by: Helm
      component: kernel
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"kernel-masterdata-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8086,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-12T19:17:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-06-03T05:06:25Z"
    name: kernel-masterdata-service
    namespace: default
    resourceVersion: "33046478"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kernel-masterdata-service
    uid: 59b55122-b407-4f4f-80b8-6e3ca1af72e6
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 65
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kernel-masterdata-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kernel-masterdata-service
          component: kernel
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: JDK_JAVA_OPTIONS
            value: -Xms4000M -Xmx4000M
          image: mosipid/kernel-masterdata-service:1.1.4.1
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 1
            httpGet:
              path: /v1/masterdata/actuator/health
              port: 8086
              scheme: HTTP
            initialDelaySeconds: 230
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: kernel-masterdata-service
          ports:
          - containerPort: 8086
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/masterdata/actuator/health
              port: 8086
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 6G
            requests:
              cpu: "1"
              memory: 4G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 65
    conditions:
    - lastTransitionTime: "2021-05-12T19:17:51Z"
      lastUpdateTime: "2021-05-12T19:20:36Z"
      message: ReplicaSet "kernel-masterdata-service-5fd5757c9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-06-03T05:06:25Z"
      lastUpdateTime: "2021-06-03T05:06:25Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 65
    replicas: 65
    updatedReplicas: 65
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kernel
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-12T19:17:51Z"
    generation: 2
    labels:
      app: kernel-notification-service
      app.kubernetes.io/managed-by: Helm
      component: kernel
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"kernel-notification-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"runtime_dep_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8083,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-12T19:17:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-12T19:39:08Z"
    name: kernel-notification-service
    namespace: default
    resourceVersion: "21879174"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kernel-notification-service
    uid: 0731d981-f00f-46bc-bf89-fbb8aaf2623c
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 50
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kernel-notification-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kernel-notification-service
          component: kernel
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: runtime_dep_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/
          - name: JDK_JAVA_OPTIONS
            value: -Xms2500M -Xmx2500M
          image: mspeagle/kernel-notification-service:1.3
          imagePullPolicy: Always
          name: kernel-notification-service
          ports:
          - containerPort: 8083
            protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 2G
            requests:
              cpu: "1"
              memory: 1G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 50
    conditions:
    - lastTransitionTime: "2021-05-12T19:17:51Z"
      lastUpdateTime: "2021-05-12T19:18:16Z"
      message: ReplicaSet "kernel-notification-service-8bd64cfcf" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-12T19:39:08Z"
      lastUpdateTime: "2021-05-12T19:39:08Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 50
    replicas: 50
    updatedReplicas: 50
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kernel
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-12T19:17:51Z"
    generation: 2
    labels:
      app: kernel-otpmanager-service
      app.kubernetes.io/managed-by: Helm
      component: kernel
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"kernel-otpmanager-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8085,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-12T19:17:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-19T05:45:18Z"
    name: kernel-otpmanager-service
    namespace: default
    resourceVersion: "25270795"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kernel-otpmanager-service
    uid: 77d23739-07a4-4e1f-97ad-6db946c20138
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 50
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kernel-otpmanager-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kernel-otpmanager-service
          component: kernel
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: JDK_JAVA_OPTIONS
            value: -Xms4000M -Xmx4000M
          image: mosipid/kernel-otpmanager-service:1.1.4
          imagePullPolicy: Always
          name: kernel-otpmanager-service
          ports:
          - containerPort: 8085
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/otpmanager/actuator/health
              port: 8085
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 6G
            requests:
              cpu: "1"
              memory: 4G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 50
    conditions:
    - lastTransitionTime: "2021-05-12T19:17:51Z"
      lastUpdateTime: "2021-05-12T19:20:30Z"
      message: ReplicaSet "kernel-otpmanager-service-55575b95c8" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-19T05:45:18Z"
      lastUpdateTime: "2021-05-19T05:45:18Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 50
    replicas: 50
    updatedReplicas: 50
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kernel
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-12T19:17:51Z"
    generation: 2
    labels:
      app: kernel-pridgenerator-service
      app.kubernetes.io/managed-by: Helm
      component: kernel
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"kernel-pridgenerator-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8100,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-12T19:17:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-12T20:12:07Z"
    name: kernel-pridgenerator-service
    namespace: default
    resourceVersion: "21894533"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kernel-pridgenerator-service
    uid: b3c2902a-3d29-4015-8abe-55a75dc8b177
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 8
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kernel-pridgenerator-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kernel-pridgenerator-service
          component: kernel
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: JDK_JAVA_OPTIONS
            value: -Xms4000M -Xmx4000M
          image: mosipid/kernel-pridgenerator-service:1.1.4
          imagePullPolicy: Always
          name: kernel-pridgenerator-service
          ports:
          - containerPort: 8100
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            tcpSocket:
              port: 8100
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "2"
              memory: 6G
            requests:
              cpu: "1"
              memory: 4G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 8
    conditions:
    - lastTransitionTime: "2021-05-12T19:17:51Z"
      lastUpdateTime: "2021-05-12T19:20:36Z"
      message: ReplicaSet "kernel-pridgenerator-service-5df88db987" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-12T20:12:07Z"
      lastUpdateTime: "2021-05-12T20:12:07Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 8
    replicas: 8
    updatedReplicas: 8
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kernel
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-12T19:17:51Z"
    generation: 3
    labels:
      app: kernel-syncdata-service
      app.kubernetes.io/managed-by: Helm
      component: kernel
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"kernel-syncdata-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8089,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-12T19:17:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-12T19:48:27Z"
    name: kernel-syncdata-service
    namespace: default
    resourceVersion: "21885875"
    selfLink: /apis/apps/v1/namespaces/default/deployments/kernel-syncdata-service
    uid: 61818587-b279-4de9-91e3-754b42a406a6
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 24
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kernel-syncdata-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kernel-syncdata-service
          component: kernel
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: JDK_JAVA_OPTIONS
            value: -Xms4000M -Xmx4000M
          image: mosipid/kernel-syncdata-service:1.1.4.1
          imagePullPolicy: Always
          name: kernel-syncdata-service
          ports:
          - containerPort: 8089
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /v1/syncdata/actuator/health
              port: 8089
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 5G
            requests:
              cpu: 200m
              memory: 5G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 24
    conditions:
    - lastTransitionTime: "2021-05-12T19:17:51Z"
      lastUpdateTime: "2021-05-12T19:20:43Z"
      message: ReplicaSet "kernel-syncdata-service-55dfdb85b9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-12T19:48:27Z"
      lastUpdateTime: "2021-05-12T19:48:27Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 3
    readyReplicas: 24
    replicas: 24
    updatedReplicas: 24
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "3"
      meta.helm.sh/release-name: keycloak
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-07T18:58:53Z"
    generation: 5
    labels:
      app: keycloak
      app.kubernetes.io/managed-by: Helm
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"keycloak"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"DB_ADDR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_DATABASE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_PORT"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"DB_VENDOR"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KEYCLOAK_FRONTEND_URL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KEYCLOAK_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"KEYCLOAK_USER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8080,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-07T18:58:53Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:template:
            f:spec:
              f:containers:
                k:{"name":"keycloak"}:
                  f:resources:
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
      manager: dashboard
      operation: Update
      time: "2021-05-25T04:12:16Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-25T04:18:33Z"
    name: keycloak
    namespace: default
    resourceVersion: "28386764"
    selfLink: /apis/apps/v1/namespaces/default/deployments/keycloak
    uid: bc44d9c3-3dec-4bf0-8ad1-2cdb001ecf9c
  spec:
    minReadySeconds: 150
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: keycloak
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: keycloak
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: KEYCLOAK_USER
            value: admin
          - name: KEYCLOAK_PASSWORD
            value: admin
          - name: DB_VENDOR
            value: postgres
          - name: DB_DATABASE
            value: keycloak
          - name: DB_ADDR
            value: psa-prereg-postgresql-db.cluster-co3nrmiboa1o.ap-southeast-1.rds.amazonaws.com
          - name: DB_PORT
            value: "5432"
          - name: DB_USER
            value: postgres
          - name: DB_PASSWORD
            value: 08xJxMaAiWcjkSWp99KK
          - name: KEYCLOAK_FRONTEND_URL
            value: https://10.0.24.230/keycloak/auth/
          image: jboss/keycloak:9.0.0
          imagePullPolicy: IfNotPresent
          name: keycloak
          ports:
          - containerPort: 8080
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 8080
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "12"
              memory: 8G
            requests:
              cpu: "6"
              memory: 3G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-05-07T18:58:53Z"
      lastUpdateTime: "2021-05-25T04:15:18Z"
      message: ReplicaSet "keycloak-7b7f8fc6c8" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-25T04:18:33Z"
      lastUpdateTime: "2021-05-25T04:18:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: nfs-provisioner
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-04-02T19:06:12Z"
    generation: 1
    labels:
      app: nfs-client-provisioner
      app.kubernetes.io/managed-by: Helm
      chart: nfs-client-provisioner-1.2.8
      heritage: Helm
      release: nfs-provisioner
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:release: {}
          f:strategy:
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:exportLogs: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"nfs-client-provisioner"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"NFS_PATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NFS_SERVER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"PROVISIONER_NAME"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/persistentvolumes"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"nfs-client-root"}:
                  .: {}
                  f:name: {}
                  f:nfs:
                    .: {}
                    f:path: {}
                    f:server: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-02T19:06:12Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:48:16Z"
    name: nfs-provisioner-nfs-client-provisioner
    namespace: default
    resourceVersion: "14568541"
    selfLink: /apis/apps/v1/namespaces/default/deployments/nfs-provisioner-nfs-client-provisioner
    uid: 0e72d605-de59-4960-92af-b6dbad0adb1b
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: nfs-client-provisioner
        release: nfs-provisioner
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: nfs-client-provisioner
          exportLogs: enabled
          release: nfs-provisioner
      spec:
        containers:
        - env:
          - name: PROVISIONER_NAME
            value: cluster.local/nfs-provisioner-nfs-client-provisioner
          - name: NFS_SERVER
            value: psa-console.sb
          - name: NFS_PATH
            value: /srv/nfs/mosip
          image: quay.io/external_storage/nfs-client-provisioner:v3.1.0-k8s1.11
          imagePullPolicy: IfNotPresent
          name: nfs-client-provisioner
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /persistentvolumes
            name: nfs-client-root
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nfs-provisioner-nfs-client-provisioner
        serviceAccountName: nfs-provisioner-nfs-client-provisioner
        terminationGracePeriodSeconds: 30
        volumes:
        - name: nfs-client-root
          nfs:
            path: /srv/nfs/mosip
            server: psa-console.sb
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T19:06:12Z"
      lastUpdateTime: "2021-04-02T19:06:22Z"
      message: ReplicaSet "nfs-provisioner-nfs-client-provisioner-65cf798558" has
        successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T21:48:16Z"
      lastUpdateTime: "2021-04-29T21:48:16Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: packetmanager
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-04-29T21:35:19Z"
    generation: 1
    labels:
      app: packetmanager-service
      app.kubernetes.io/managed-by: Helm
      component: packetmanager
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"logger-sidecar"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"packetmanager-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"cache_provider_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8093,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"applogs"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-29T21:35:19Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:37:49Z"
    name: packetmanager-service
    namespace: default
    resourceVersion: "14565205"
    selfLink: /apis/apps/v1/namespaces/default/deployments/packetmanager-service
    uid: 76a88505-5b47-4458-a1e0-35dab9c585fb
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: packetmanager-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: packetmanager-service
          component: packetmanager
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: cache_provider_url_env
            value: http://artifactory-service/artifactory/libs-release-local/cache/cache-provider.jar
          - name: JDK_JAVA_OPTIONS
            value: -Xms4000M -Xmx4000M
          image: mosipid/commons-packet-service:1.1.4
          imagePullPolicy: Always
          name: packetmanager-service
          ports:
          - containerPort: 8093
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /commons/v1/packetmanager/actuator/health
              port: 8093
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 5G
            requests:
              cpu: 200m
              memory: 5G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /logs
            name: applogs
        - args:
          - /bin/sh
          - -c
          - tail -F /logs/packetutility.log
          image: busybox
          imagePullPolicy: Always
          name: logger-sidecar
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /logs
            name: applogs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: applogs
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-04-29T21:37:49Z"
      lastUpdateTime: "2021-04-29T21:37:49Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2021-04-29T21:35:19Z"
      lastUpdateTime: "2021-04-29T21:37:49Z"
      message: ReplicaSet "packetmanager-service-7dd4b9fcf8" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prereg
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-23T22:23:12Z"
    generation: 2
    labels:
      app: prereg-application-service
      app.kubernetes.io/managed-by: Helm
      component: prereg
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"logger-sidecar"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/home/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prereg-application-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"mosipbox_public_url"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/home/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"applogs"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-23T22:23:12Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-28T05:15:24Z"
    name: prereg-application-service
    namespace: default
    resourceVersion: "29962534"
    selfLink: /apis/apps/v1/namespaces/default/deployments/prereg-application-service
    uid: 0167c133-2360-42b2-9bf9-ce89fd982eb8
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 50
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prereg-application-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prereg-application-service
          component: prereg
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: mosipbox_public_url
            value: https://10.0.24.230
          - name: JDK_JAVA_OPTIONS
            value: -Xms2500M -Xmx2500M
          image: mspeagle/pre-registration-application-service:aws1.3
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /preregistration/v1/actuator/health
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 300
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          name: prereg-application-service
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /preregistration/v1/actuator/health
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 3500M
            requests:
              cpu: 500m
              memory: 3G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/logs
            name: applogs
        - args:
          - /bin/sh
          - -c
          - tail -F /home/logs/preregistration.log
          image: busybox
          imagePullPolicy: Always
          name: logger-sidecar
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/logs
            name: applogs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: applogs
  status:
    availableReplicas: 50
    conditions:
    - lastTransitionTime: "2021-05-23T22:23:12Z"
      lastUpdateTime: "2021-05-23T22:27:06Z"
      message: ReplicaSet "prereg-application-service-67c8f64fbb" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-28T05:15:24Z"
      lastUpdateTime: "2021-05-28T05:15:24Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 50
    replicas: 50
    updatedReplicas: 50
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prereg
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-23T22:23:12Z"
    generation: 2
    labels:
      app: prereg-booking-service
      app.kubernetes.io/managed-by: Helm
      component: prereg
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
            f:spec:
              f:containers:
                k:{"name":"logger-sidecar"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/home/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prereg-booking-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"mosipbox_public_url"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9095,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/home/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"applogs"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-23T22:23:12Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-24T00:39:20Z"
    name: prereg-booking-service
    namespace: default
    resourceVersion: "27783876"
    selfLink: /apis/apps/v1/namespaces/default/deployments/prereg-booking-service
    uid: 0f4f6cd3-e522-4d9b-97bb-66e060aca062
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 24
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prereg-booking-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prereg-booking-service
          component: prereg
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: mosipbox_public_url
            value: https://10.0.24.230
          image: mosipid/pre-registration-booking-service:1.1.3
          imagePullPolicy: Always
          name: prereg-booking-service
          ports:
          - containerPort: 9095
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 9095
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "1"
              memory: 3500M
            requests:
              cpu: 500m
              memory: 3G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/logs
            name: applogs
        - args:
          - /bin/sh
          - -c
          - tail -F /home/logs/preregistration.log
          image: busybox
          imagePullPolicy: Always
          name: logger-sidecar
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/logs
            name: applogs
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: applogs
  status:
    availableReplicas: 24
    conditions:
    - lastTransitionTime: "2021-05-23T22:23:12Z"
      lastUpdateTime: "2021-05-23T22:24:19Z"
      message: ReplicaSet "prereg-booking-service-697dfb755f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-24T00:39:20Z"
      lastUpdateTime: "2021-05-24T00:39:20Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 24
    replicas: 24
    updatedReplicas: 24
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prereg
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-23T22:23:12Z"
    generation: 2
    labels:
      app: prereg-datasync-service
      app.kubernetes.io/managed-by: Helm
      component: prereg
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:component: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:component: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"logger-sidecar"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/home/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prereg-datasync-service"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"active_profile_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"artifactory_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"iam_adapter_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"is_glowroot_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"mosipbox_public_url"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_label_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"spring_config_url_env"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9094,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/home/logs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"applogs"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-23T22:23:12Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-24T00:41:02Z"
    name: prereg-datasync-service
    namespace: default
    resourceVersion: "27784595"
    selfLink: /apis/apps/v1/namespaces/default/deployments/prereg-datasync-service
    uid: 33647f82-853e-4f75-aa57-9ded4692c8c3
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 24
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prereg-datasync-service
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prereg-datasync-service
          component: prereg
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: active_profile_env
            value: mz
          - name: spring_config_label_env
            value: production
          - name: spring_config_url_env
            value: http://config-server/config
          - name: artifactory_url_env
            value: http://artifactory-service/
          - name: is_glowroot_env
            value: absent
          - name: iam_adapter_url_env
            value: http://artifactory-service/artifactory/libs-release-local/io/mosip/kernel/kernel-auth-adapter.jar
          - name: mosipbox_public_url
            value: https://10.0.24.230
          - name: JDK_JAVA_OPTIONS
            value: -Xms2000M -Xmx2000M
          image: mosipid/pre-registration-datasync-service:1.1.3
          imagePullPolicy: Always
          name: prereg-datasync-service
          ports:
          - containerPort: 9094
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /preregistration/v1/actuator/health
              port: 9094
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 500m
              memory: 2500M
            requests:
              cpu: 200m
              memory: 2500M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/logs
            name: applogs
        - args:
          - /bin/sh
          - -c
          - tail -F /home/logs/preregistration.log
          image: busybox
          imagePullPolicy: Always
          name: logger-sidecar
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /home/logs
            name: applogs
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: applogs
  status:
    availableReplicas: 24
    conditions:
    - lastTransitionTime: "2021-05-23T22:23:12Z"
      lastUpdateTime: "2021-05-23T22:26:55Z"
      message: ReplicaSet "prereg-datasync-service-77d687bb4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-24T00:41:02Z"
      lastUpdateTime: "2021-05-24T00:41:02Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 2
    readyReplicas: 24
    replicas: 24
    updatedReplicas: 24
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: prereg
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2021-05-23T22:23:12Z"
    generation: 5
    labels:
      app.kubernetes.io/managed-by: Helm
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/managed-by: {}
        f:spec:
          f:minReadySeconds: {}
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"prereg-ui"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"JDK_JAVA_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:tcpSocket:
                      .: {}
                      f:port: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/usr/share/nginx/html/assets/config.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:imagePullSecrets:
                .: {}
                k:{"name":"dockerhubkey"}:
                  .: {}
                  f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"ui-config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2021-05-23T22:23:12Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:spec:
          f:template:
            f:spec:
              f:containers:
                k:{"name":"prereg-ui"}:
                  f:image: {}
      manager: dashboard
      operation: Update
      time: "2021-05-23T22:48:30Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-05-24T00:39:55Z"
    name: prereg-ui
    namespace: default
    resourceVersion: "27784109"
    selfLink: /apis/apps/v1/namespaces/default/deployments/prereg-ui
    uid: fa8a492e-2fb8-458f-8201-722caeb7bf06
  spec:
    minReadySeconds: 10
    progressDeadlineSeconds: 600
    replicas: 10
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prereg-ui
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prereg-ui
          exportLogs: enabled
      spec:
        containers:
        - env:
          - name: JDK_JAVA_OPTIONS
            value: -Xms6000M -Xmx6000M
          image: mspeagle/pre-registration-ui-aws:booking1.3
          imagePullPolicy: Always
          name: prereg-ui
          ports:
          - containerPort: 80
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 180
            periodSeconds: 30
            successThreshold: 1
            tcpSocket:
              port: 80
            timeoutSeconds: 1
          resources:
            limits:
              cpu: "12"
              memory: 24375M
            requests:
              cpu: "8"
              memory: 12075M
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /usr/share/nginx/html/assets/config.json
            name: ui-config
            subPath: config.json
        dnsPolicy: ClusterFirst
        imagePullSecrets:
        - name: dockerhubkey
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: prereg-ui-config
          name: ui-config
  status:
    availableReplicas: 10
    conditions:
    - lastTransitionTime: "2021-05-23T22:23:12Z"
      lastUpdateTime: "2021-05-23T22:48:48Z"
      message: ReplicaSet "prereg-ui-7cbb884cb8" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-05-24T00:39:55Z"
      lastUpdateTime: "2021-05-24T00:39:55Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 5
    readyReplicas: 10
    replicas: 10
    updatedReplicas: 10
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: ingress-nginx
      meta.helm.sh/release-namespace: ingress-nginx
    creationTimestamp: "2021-04-02T11:07:11Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ingress-nginx
      app.kubernetes.io/part-of: ingress-nginx
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app.kubernetes.io/name: {}
              f:app.kubernetes.io/part-of: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:prometheus.io/port: {}
                f:prometheus.io/scrape: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/name: {}
                f:app.kubernetes.io/part-of: {}
                f:exportLogs: {}
            f:spec:
              f:containers:
                k:{"name":"nginx-ingress-controller"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_NAME"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                    k:{"name":"POD_NAMESPACE"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:lifecycle:
                    .: {}
                    f:preStop:
                      .: {}
                      f:exec:
                        .: {}
                        f:command: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-02T11:07:11Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:14:42Z"
    name: nginx-ingress-controller
    namespace: ingress-nginx
    resourceVersion: "14552804"
    selfLink: /apis/apps/v1/namespaces/ingress-nginx/deployments/nginx-ingress-controller
    uid: cc9fa5d5-abfa-4381-a412-76c05e541f01
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "10254"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: ingress-nginx
          app.kubernetes.io/part-of: ingress-nginx
          exportLogs: enabled
      spec:
        containers:
        - args:
          - /nginx-ingress-controller
          - --configmap=$(POD_NAMESPACE)/nginx-configuration
          - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
          - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
          - --publish-service=$(POD_NAMESPACE)/ingress-nginx
          - --annotations-prefix=nginx.ingress.kubernetes.io
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - /wait-shutdown
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: nginx-ingress-controller
          ports:
          - containerPort: 80
            name: http
            protocol: TCP
          - containerPort: 443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            runAsUser: 101
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: nginx-ingress-serviceaccount
        serviceAccountName: nginx-ingress-serviceaccount
        terminationGracePeriodSeconds: 300
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T11:07:11Z"
      lastUpdateTime: "2021-04-02T11:07:48Z"
      message: ReplicaSet "nginx-ingress-controller-7cb444c6bd" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T21:14:42Z"
      lastUpdateTime: "2021-04-29T21:14:42Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2021-04-02T11:05:11Z"
    generation: 1
    labels:
      k8s-app: kube-dns
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"coredns"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":53,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":53,"protocol":"UDP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":9153,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:add: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/coredns"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:priorityClassName: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:items: {}
                    f:name: {}
                  f:name: {}
      manager: kubeadm
      operation: Update
      time: "2021-04-02T11:05:11Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:35:23Z"
    name: coredns
    namespace: kube-system
    resourceVersion: "14564014"
    selfLink: /apis/apps/v1/namespaces/kube-system/deployments/coredns
    uid: f2bef4f0-4187-4dd0-b38c-a3dd2fa69ba7
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-dns
      spec:
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: k8s.gcr.io/coredns:1.7.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - all
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2021-04-02T11:05:27Z"
      lastUpdateTime: "2021-04-02T11:05:45Z"
      message: ReplicaSet "coredns-74ff55c5b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-02T19:20:20Z"
      lastUpdateTime: "2021-04-02T19:20:20Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"dashboard-metrics-scraper"},"name":"dashboard-metrics-scraper","namespace":"kubernetes-dashboard"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"k8s-app":"dashboard-metrics-scraper"}},"template":{"metadata":{"annotations":{"seccomp.security.alpha.kubernetes.io/pod":"runtime/default"},"labels":{"k8s-app":"dashboard-metrics-scraper"}},"spec":{"containers":[{"image":"kubernetesui/metrics-scraper:v1.0.4","livenessProbe":{"httpGet":{"path":"/","port":8000,"scheme":"HTTP"},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"dashboard-metrics-scraper","ports":[{"containerPort":8000,"protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":2001,"runAsUser":1001},"volumeMounts":[{"mountPath":"/tmp","name":"tmp-volume"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"kubernetes-dashboard","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: "2021-04-02T11:07:52Z"
    generation: 1
    labels:
      k8s-app: dashboard-metrics-scraper
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:seccomp.security.alpha.kubernetes.io/pod: {}
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"dashboard-metrics-scraper"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-04-02T11:07:52Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:35:35Z"
    name: dashboard-metrics-scraper
    namespace: kubernetes-dashboard
    resourceVersion: "14564283"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/deployments/dashboard-metrics-scraper
    uid: 424d0da7-0f7f-4415-b1ec-426f620322e2
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: dashboard-metrics-scraper
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          seccomp.security.alpha.kubernetes.io/pod: runtime/default
        creationTimestamp: null
        labels:
          k8s-app: dashboard-metrics-scraper
      spec:
        containers:
        - image: kubernetesui/metrics-scraper:v1.0.4
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T11:07:52Z"
      lastUpdateTime: "2021-04-02T11:07:59Z"
      message: ReplicaSet "dashboard-metrics-scraper-7b59f7d4df" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T21:35:35Z"
      lastUpdateTime: "2021-04-29T21:35:35Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"kubernetes-dashboard"},"name":"kubernetes-dashboard","namespace":"kubernetes-dashboard"},"spec":{"replicas":1,"revisionHistoryLimit":10,"selector":{"matchLabels":{"k8s-app":"kubernetes-dashboard"}},"template":{"metadata":{"labels":{"k8s-app":"kubernetes-dashboard"}},"spec":{"containers":[{"args":["--auto-generate-certificates","--namespace=kubernetes-dashboard","--token-ttl=86400"],"image":"kubernetesui/dashboard:v2.0.0","imagePullPolicy":"Always","livenessProbe":{"httpGet":{"path":"/","port":8443,"scheme":"HTTPS"},"initialDelaySeconds":30,"timeoutSeconds":30},"name":"kubernetes-dashboard","ports":[{"containerPort":8443,"protocol":"TCP"}],"securityContext":{"allowPrivilegeEscalation":false,"readOnlyRootFilesystem":true,"runAsGroup":2001,"runAsUser":1001},"volumeMounts":[{"mountPath":"/certs","name":"kubernetes-dashboard-certs"},{"mountPath":"/tmp","name":"tmp-volume"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"serviceAccountName":"kubernetes-dashboard","tolerations":[{"effect":"NoSchedule","key":"node-role.kubernetes.io/master"}],"volumes":[{"name":"kubernetes-dashboard-certs","secret":{"secretName":"kubernetes-dashboard-certs"}},{"emptyDir":{},"name":"tmp-volume"}]}}}}
    creationTimestamp: "2021-04-02T11:07:51Z"
    generation: 1
    labels:
      k8s-app: kubernetes-dashboard
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:k8s-app: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:k8s-app: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:k8s-app: {}
            f:spec:
              f:containers:
                k:{"name":"kubernetes-dashboard"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/certs"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:nodeSelector:
                .: {}
                f:kubernetes.io/os: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:tolerations: {}
              f:volumes:
                .: {}
                k:{"name":"kubernetes-dashboard-certs"}:
                  .: {}
                  f:name: {}
                  f:secret:
                    .: {}
                    f:defaultMode: {}
                    f:secretName: {}
                k:{"name":"tmp-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: kubectl-client-side-apply
      operation: Update
      time: "2021-04-02T11:07:51Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T20:58:13Z"
    name: kubernetes-dashboard
    namespace: kubernetes-dashboard
    resourceVersion: "14542465"
    selfLink: /apis/apps/v1/namespaces/kubernetes-dashboard/deployments/kubernetes-dashboard
    uid: 34213026-520e-4831-90fd-2d6e89e3abf0
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kubernetes-dashboard
      spec:
        containers:
        - args:
          - --auto-generate-certificates
          - --namespace=kubernetes-dashboard
          - --token-ttl=86400
          image: kubernetesui/dashboard:v2.0.0
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8443
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard
          ports:
          - containerPort: 8443
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /certs
            name: kubernetes-dashboard-certs
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard
        serviceAccountName: kubernetes-dashboard
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        volumes:
        - name: kubernetes-dashboard-certs
          secret:
            defaultMode: 420
            secretName: kubernetes-dashboard-certs
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T11:07:51Z"
      lastUpdateTime: "2021-04-02T11:08:04Z"
      message: ReplicaSet "kubernetes-dashboard-77c9766b" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T20:58:13Z"
      lastUpdateTime: "2021-04-29T20:58:13Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: graf
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2021-04-02T19:08:32Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: graf
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: grafana
      app.kubernetes.io/version: 7.3.5
      helm.sh/chart: grafana-6.7.1
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/version: {}
            f:helm.sh/chart: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app.kubernetes.io/instance: {}
              f:app.kubernetes.io/name: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:annotations:
                .: {}
                f:checksum/config: {}
                f:checksum/dashboards-json-config: {}
                f:checksum/sc-dashboard-provider-config: {}
                f:checksum/secret: {}
              f:labels:
                .: {}
                f:app.kubernetes.io/instance: {}
                f:app.kubernetes.io/name: {}
            f:spec:
              f:containers:
                k:{"name":"grafana"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"GF_SECURITY_ADMIN_PASSWORD"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                    k:{"name":"GF_SECURITY_ADMIN_USER"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:secretKeyRef:
                          .: {}
                          f:key: {}
                          f:name: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":80,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                    k:{"containerPort":3000,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/grafana/grafana.ini"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/grafana/provisioning/dashboards/dashboardproviders.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
                    k:{"mountPath":"/etc/grafana/provisioning/datasources"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/grafana/provisioning/notifiers/notifiers.yaml"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/lib/grafana"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/var/lib/grafana/dashboards/default/node-dashboard.json"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
              f:dnsPolicy: {}
              f:initContainers:
                .: {}
                k:{"name":"download-dashboards"}:
                  .: {}
                  f:args: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/grafana/download_dashboards.sh"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:subPath: {}
                    k:{"mountPath":"/var/lib/grafana"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"grafana-sc-datasources"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"FOLDER"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"LABEL"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"METHOD"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"RESOURCE"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/grafana/provisioning/datasources"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"init-chown-data"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/var/lib/grafana"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"dashboards-default"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"sc-datasources-volume"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
                k:{"name":"storage"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-02T19:08:32Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T20:33:32Z"
    name: graf-grafana
    namespace: monitoring
    resourceVersion: "14532109"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/graf-grafana
    uid: f9fbe6e1-ec84-419d-8827-98e8368f33fd
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: graf
        app.kubernetes.io/name: grafana
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: 0350936d4fedd620f75c7ee0b0405dac2f88ca807078e90367b2033d6e16c9e9
          checksum/dashboards-json-config: 826873bf8e5e31ad64bbc5ad1c32a063ac20bd23c649f7209e6518c7a050e943
          checksum/sc-dashboard-provider-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
          checksum/secret: ea27b871d0b28611fefeee48cb485e1816cdea36a78a058cf0a9397209e6dbd6
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: graf
          app.kubernetes.io/name: grafana
      spec:
        containers:
        - env:
          - name: GF_SECURITY_ADMIN_USER
            valueFrom:
              secretKeyRef:
                key: admin-user
                name: graf-grafana
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: admin-password
                name: graf-grafana
          image: grafana/grafana:7.3.5
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: grafana
          ports:
          - containerPort: 80
            name: service
            protocol: TCP
          - containerPort: 3000
            name: grafana
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/health
              port: 3000
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/grafana.ini
            name: config
            subPath: grafana.ini
          - mountPath: /var/lib/grafana
            name: storage
          - mountPath: /var/lib/grafana/dashboards/default/node-dashboard.json
            name: dashboards-default
            subPath: node-dashboard.json
          - mountPath: /etc/grafana/provisioning/notifiers/notifiers.yaml
            name: config
            subPath: notifiers.yaml
          - mountPath: /etc/grafana/provisioning/dashboards/dashboardproviders.yaml
            name: config
            subPath: dashboardproviders.yaml
          - mountPath: /etc/grafana/provisioning/datasources
            name: sc-datasources-volume
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - chown
          - -R
          - 472:472
          - /var/lib/grafana
          image: busybox:1.31.1
          imagePullPolicy: IfNotPresent
          name: init-chown-data
          resources: {}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/grafana
            name: storage
        - args:
          - -c
          - mkdir -p /var/lib/grafana/dashboards/default && /bin/sh /etc/grafana/download_dashboards.sh
          command:
          - /bin/sh
          image: curlimages/curl:7.73.0
          imagePullPolicy: IfNotPresent
          name: download-dashboards
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/download_dashboards.sh
            name: config
            subPath: download_dashboards.sh
          - mountPath: /var/lib/grafana
            name: storage
        - env:
          - name: METHOD
            value: LIST
          - name: LABEL
            value: grafana_datasource
          - name: FOLDER
            value: /etc/grafana/provisioning/datasources
          - name: RESOURCE
            value: both
          image: kiwigrid/k8s-sidecar:1.1.0
          imagePullPolicy: IfNotPresent
          name: grafana-sc-datasources
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/grafana/provisioning/datasources
            name: sc-datasources-volume
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 472
          runAsGroup: 472
          runAsUser: 472
        serviceAccount: graf-grafana
        serviceAccountName: graf-grafana
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: graf-grafana
          name: config
        - configMap:
            defaultMode: 420
            name: graf-grafana-dashboards-default
          name: dashboards-default
        - name: storage
          persistentVolumeClaim:
            claimName: graf-grafana
        - emptyDir: {}
          name: sc-datasources-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T19:08:32Z"
      lastUpdateTime: "2021-04-02T19:09:16Z"
      message: ReplicaSet "graf-grafana-7f9988d46d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T20:33:32Z"
      lastUpdateTime: "2021-04-29T20:33:32Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kibana
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2021-04-02T19:11:06Z"
    generation: 1
    labels:
      app: kibana
      app.kubernetes.io/managed-by: Helm
      heritage: Helm
      release: kibana
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:release: {}
          f:strategy:
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:exportLogs: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"kibana"}:
                  .: {}
                  f:env:
                    .: {}
                    k:{"name":"ELASTICSEARCH_HOSTS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"NODE_OPTIONS"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SERVER_BASEPATH"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                    k:{"name":"SERVER_HOST"}:
                      .: {}
                      f:name: {}
                      f:value: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":5601,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:exec:
                      .: {}
                      f:command: {}
                    f:failureThreshold: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources:
                    .: {}
                    f:limits:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                    f:requests:
                      .: {}
                      f:cpu: {}
                      f:memory: {}
                  f:securityContext:
                    .: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-02T19:11:06Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:24:32Z"
    name: kibana-kibana
    namespace: monitoring
    resourceVersion: "14558855"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/kibana-kibana
    uid: ff0c5363-7aaf-44ca-b94b-7cfb628414b9
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: kibana
        release: kibana
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kibana
          exportLogs: enabled
          release: kibana
      spec:
        containers:
        - env:
          - name: ELASTICSEARCH_HOSTS
            value: http://elasticsearch-master:9200
          - name: SERVER_HOST
            value: 0.0.0.0
          - name: SERVER_BASEPATH
            value: /kibana
          - name: NODE_OPTIONS
            value: --max-old-space-size=1800
          image: docker.elastic.co/kibana/kibana:7.8.0
          imagePullPolicy: IfNotPresent
          name: kibana
          ports:
          - containerPort: 5601
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - |
                #!/usr/bin/env bash -e
                http () {
                    local path="${1}"
                    set -- -XGET -s --fail -L

                    if [ -n "${ELASTICSEARCH_USERNAME}" ] && [ -n "${ELASTICSEARCH_PASSWORD}" ]; then
                      set -- "$@" -u "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"
                    fi

                    STATUS=$(curl --output /dev/null --write-out "%{http_code}" -k "$@" "http://localhost:5601${path}")
                    if [[ "${STATUS}" -eq 200 ]]; then
                      exit 0
                    fi

                    echo "Error: Got HTTP code ${STATUS} but expected a 200"
                    exit 1
                }

                http "/app/kibana"
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 3
            timeoutSeconds: 5
          resources:
            limits:
              cpu: "1"
              memory: 2Gi
            requests:
              cpu: "1"
              memory: 2Gi
          securityContext:
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            runAsUser: 1000
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 1000
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T19:11:06Z"
      lastUpdateTime: "2021-04-02T19:14:09Z"
      message: ReplicaSet "kibana-kibana-59c85f5cb5" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T21:24:32Z"
      lastUpdateTime: "2021-04-29T21:24:32Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: metrics-server
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2021-04-02T19:06:43Z"
    generation: 1
    labels:
      app: metrics-server
      app.kubernetes.io/managed-by: Helm
      chart: metrics-server-2.11.1
      heritage: Helm
      release: metrics-server
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:release: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:exportLogs: {}
                f:release: {}
            f:spec:
              f:affinity: {}
              f:containers:
                k:{"name":"metrics-server"}:
                  .: {}
                  f:command: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":8443,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:hostPort: {}
                      f:name: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:securityContext:
                    .: {}
                    f:allowPrivilegeEscalation: {}
                    f:capabilities:
                      .: {}
                      f:drop: {}
                    f:readOnlyRootFilesystem: {}
                    f:runAsGroup: {}
                    f:runAsNonRoot: {}
                    f:runAsUser: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/tmp"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
              f:dnsPolicy: {}
              f:hostNetwork: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"tmp"}:
                  .: {}
                  f:emptyDir: {}
                  f:name: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-02T19:06:43Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:48:06Z"
    name: metrics-server
    namespace: monitoring
    resourceVersion: "14568484"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/metrics-server
    uid: 43139f70-06bf-4734-a630-7349c16f9431
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: metrics-server
        release: metrics-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: metrics-server
          exportLogs: enabled
          release: metrics-server
      spec:
        affinity: {}
        containers:
        - command:
          - /metrics-server
          - --cert-dir=/tmp
          - --logtostderr
          - --secure-port=8443
          - --kubelet-insecure-tls
          - --kubelet-preferred-address-types=InternalIP
          image: k8s.gcr.io/metrics-server-amd64:v0.3.6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 8443
            hostPort: 8443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            readOnlyRootFilesystem: true
            runAsGroup: 10001
            runAsNonRoot: true
            runAsUser: 10001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        hostNetwork: true
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T19:06:43Z"
      lastUpdateTime: "2021-04-02T19:07:08Z"
      message: ReplicaSet "metrics-server-74cdff5c4f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T21:48:06Z"
      lastUpdateTime: "2021-04-29T21:48:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prom
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2021-04-02T19:07:15Z"
    generation: 1
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.4.0
      component: alertmanager
      heritage: Helm
      release: prom
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:release: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:heritage: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-alertmanager"}:
                  .: {}
                  f:args: {}
                  f:env:
                    .: {}
                    k:{"name":"POD_IP"}:
                      .: {}
                      f:name: {}
                      f:valueFrom:
                        .: {}
                        f:fieldRef:
                          .: {}
                          f:apiVersion: {}
                          f:fieldPath: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9093,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prometheus-alertmanager-configmap-reload"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"storage-volume"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-02T19:07:15Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T21:42:41Z"
    name: prom-prometheus-alertmanager
    namespace: monitoring
    resourceVersion: "14567641"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/prom-prometheus-alertmanager
    uid: 654fbfcb-84b7-49fe-a06c-d7c80fd50a53
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        component: alertmanager
        release: prom
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.4.0
          component: alertmanager
          heritage: Helm
          release: prom
      spec:
        containers:
        - args:
          - --config.file=/etc/config/alertmanager.yml
          - --storage.path=/data
          - --cluster.advertise-address=$(POD_IP):6783
          - --web.external-url=http://localhost:9093
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          image: prom/alertmanager:v0.20.0
          imagePullPolicy: IfNotPresent
          name: prometheus-alertmanager
          ports:
          - containerPort: 9093
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9093
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        - args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:9093/-/reload
          image: jimmidyson/configmap-reload:v0.3.0
          imagePullPolicy: IfNotPresent
          name: prometheus-alertmanager-configmap-reload
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prom-prometheus-alertmanager
        serviceAccountName: prom-prometheus-alertmanager
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: prom-prometheus-alertmanager
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: prom-prometheus-alertmanager
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T19:07:15Z"
      lastUpdateTime: "2021-04-02T19:08:09Z"
      message: ReplicaSet "prom-prometheus-alertmanager-9dc6c75c6" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T21:42:41Z"
      lastUpdateTime: "2021-04-29T21:42:41Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prom
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2021-04-02T19:07:15Z"
    generation: 1
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.4.0
      component: pushgateway
      heritage: Helm
      release: prom
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:release: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:exportLogs: {}
                f:heritage: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-pushgateway"}:
                  .: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9091,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-02T19:07:15Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-29T20:26:43Z"
    name: prom-prometheus-pushgateway
    namespace: monitoring
    resourceVersion: "14529253"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/prom-prometheus-pushgateway
    uid: e7950cc5-9ebe-4780-907d-7355c669595c
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        component: pushgateway
        release: prom
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.4.0
          component: pushgateway
          exportLogs: enabled
          heritage: Helm
          release: prom
      spec:
        containers:
        - image: prom/pushgateway:v1.0.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: prometheus-pushgateway
          ports:
          - containerPort: 9091
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9091
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prom-prometheus-pushgateway
        serviceAccountName: prom-prometheus-pushgateway
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T19:07:15Z"
      lastUpdateTime: "2021-04-02T19:07:48Z"
      message: ReplicaSet "prom-prometheus-pushgateway-85d794c6cc" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-29T20:26:43Z"
      lastUpdateTime: "2021-04-29T20:26:43Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: prom
      meta.helm.sh/release-namespace: monitoring
    creationTimestamp: "2021-04-02T19:07:15Z"
    generation: 1
    labels:
      app: prometheus
      app.kubernetes.io/managed-by: Helm
      chart: prometheus-11.4.0
      component: server
      heritage: Helm
      release: prom
    managedFields:
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:meta.helm.sh/release-name: {}
            f:meta.helm.sh/release-namespace: {}
          f:labels:
            .: {}
            f:app: {}
            f:app.kubernetes.io/managed-by: {}
            f:chart: {}
            f:component: {}
            f:heritage: {}
            f:release: {}
        f:spec:
          f:progressDeadlineSeconds: {}
          f:replicas: {}
          f:revisionHistoryLimit: {}
          f:selector:
            f:matchLabels:
              .: {}
              f:app: {}
              f:component: {}
              f:release: {}
          f:strategy:
            f:rollingUpdate:
              .: {}
              f:maxSurge: {}
              f:maxUnavailable: {}
            f:type: {}
          f:template:
            f:metadata:
              f:labels:
                .: {}
                f:app: {}
                f:chart: {}
                f:component: {}
                f:exportLogs: {}
                f:heritage: {}
                f:release: {}
            f:spec:
              f:containers:
                k:{"name":"prometheus-server"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:livenessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:name: {}
                  f:ports:
                    .: {}
                    k:{"containerPort":9090,"protocol":"TCP"}:
                      .: {}
                      f:containerPort: {}
                      f:protocol: {}
                  f:readinessProbe:
                    .: {}
                    f:failureThreshold: {}
                    f:httpGet:
                      .: {}
                      f:path: {}
                      f:port: {}
                      f:scheme: {}
                    f:initialDelaySeconds: {}
                    f:periodSeconds: {}
                    f:successThreshold: {}
                    f:timeoutSeconds: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/data"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                k:{"name":"prometheus-server-configmap-reload"}:
                  .: {}
                  f:args: {}
                  f:image: {}
                  f:imagePullPolicy: {}
                  f:name: {}
                  f:resources: {}
                  f:terminationMessagePath: {}
                  f:terminationMessagePolicy: {}
                  f:volumeMounts:
                    .: {}
                    k:{"mountPath":"/etc/config"}:
                      .: {}
                      f:mountPath: {}
                      f:name: {}
                      f:readOnly: {}
              f:dnsPolicy: {}
              f:restartPolicy: {}
              f:schedulerName: {}
              f:securityContext:
                .: {}
                f:fsGroup: {}
                f:runAsGroup: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:serviceAccount: {}
              f:serviceAccountName: {}
              f:terminationGracePeriodSeconds: {}
              f:volumes:
                .: {}
                k:{"name":"config-volume"}:
                  .: {}
                  f:configMap:
                    .: {}
                    f:defaultMode: {}
                    f:name: {}
                  f:name: {}
                k:{"name":"storage-volume"}:
                  .: {}
                  f:name: {}
                  f:persistentVolumeClaim:
                    .: {}
                    f:claimName: {}
      manager: Go-http-client
      operation: Update
      time: "2021-04-02T19:07:15Z"
    - apiVersion: apps/v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            f:deployment.kubernetes.io/revision: {}
        f:status:
          f:availableReplicas: {}
          f:conditions:
            .: {}
            k:{"type":"Available"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Progressing"}:
              .: {}
              f:lastTransitionTime: {}
              f:lastUpdateTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:observedGeneration: {}
          f:readyReplicas: {}
          f:replicas: {}
          f:updatedReplicas: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-30T07:39:21Z"
    name: prom-prometheus-server
    namespace: monitoring
    resourceVersion: "14796276"
    selfLink: /apis/apps/v1/namespaces/monitoring/deployments/prom-prometheus-server
    uid: 6caf1ed2-7933-44d9-af0d-d5741d667721
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: prometheus
        component: server
        release: prom
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: prometheus
          chart: prometheus-11.4.0
          component: server
          exportLogs: enabled
          heritage: Helm
          release: prom
      spec:
        containers:
        - args:
          - --volume-dir=/etc/config
          - --webhook-url=http://127.0.0.1:9090/-/reload
          image: jimmidyson/configmap-reload:v0.3.0
          imagePullPolicy: IfNotPresent
          name: prometheus-server-configmap-reload
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
            readOnly: true
        - args:
          - --storage.tsdb.retention.time=15d
          - --config.file=/etc/config/prometheus.yml
          - --storage.tsdb.path=/data
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          image: prom/prometheus:v2.18.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: prometheus-server
          ports:
          - containerPort: 9090
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/config
            name: config-volume
          - mountPath: /data
            name: storage-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
        serviceAccount: prom-prometheus-server
        serviceAccountName: prom-prometheus-server
        terminationGracePeriodSeconds: 300
        volumes:
        - configMap:
            defaultMode: 420
            name: prom-prometheus-server
          name: config-volume
        - name: storage-volume
          persistentVolumeClaim:
            claimName: prom-prometheus-server
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2021-04-02T19:07:15Z"
      lastUpdateTime: "2021-04-02T19:08:25Z"
      message: ReplicaSet "prom-prometheus-server-7b55bbc7f8" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2021-04-30T07:39:21Z"
      lastUpdateTime: "2021-04-30T07:39:21Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
