2024-06-14T10:05:19.695Z [INFO]  Terraform version: 1.8.5
2024-06-14T10:05:19.695Z [INFO]  Go runtime version: go1.22.1
2024-06-14T10:05:19.695Z [INFO]  CLI args: []string{"/home/runner/work/_temp/67353eca-d681-4ef1-804a-7a4301af7f01/terraform-bin", "fmt"}
2024-06-14T10:05:19.695Z [INFO]  CLI command args: []string{"fmt"}
2024-06-14T10:05:19.837Z [INFO]  Terraform version: 1.8.5
2024-06-14T10:05:19.837Z [INFO]  Go runtime version: go1.22.1
2024-06-14T10:05:19.837Z [INFO]  CLI args: []string{"/home/runner/work/_temp/67353eca-d681-4ef1-804a-7a4301af7f01/terraform-bin", "init"}
2024-06-14T10:05:19.838Z [INFO]  CLI command args: []string{"init"}
2024-06-14T10:05:23.252Z [INFO]  Terraform version: 1.8.5
2024-06-14T10:05:23.252Z [INFO]  Go runtime version: go1.22.1
2024-06-14T10:05:23.252Z [INFO]  CLI args: []string{"/home/runner/work/_temp/67353eca-d681-4ef1-804a-7a4301af7f01/terraform-bin", "validate", "-no-color"}
2024-06-14T10:05:23.253Z [INFO]  CLI command args: []string{"validate", "-no-color"}
2024-06-14T10:05:23.622Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:23.723Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:23.723Z
2024-06-14T10:05:24.454Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:24.461Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:24.461Z
2024-06-14T10:05:24.531Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:24.543Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:24.543Z
2024-06-14T10:05:24.591Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:24.685Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:24.685Z
2024-06-14T10:05:24.977Z [INFO]  Terraform version: 1.8.5
2024-06-14T10:05:24.977Z [INFO]  Go runtime version: go1.22.1
2024-06-14T10:05:24.977Z [INFO]  CLI args: []string{"/home/runner/work/_temp/67353eca-d681-4ef1-804a-7a4301af7f01/terraform-bin", "plan", "-no-color", "-input=false", "-var-file=./env.tfvars"}
2024-06-14T10:05:24.977Z [INFO]  CLI command args: []string{"plan", "-no-color", "-input=false", "-var-file=./env.tfvars"}
2024-06-14T10:05:25.344Z [INFO]  backend/local: starting Plan operation
2024-06-14T10:05:25.347Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:25.427Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:25.427Z
2024-06-14T10:05:26.051Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:26.059Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:26.059Z
2024-06-14T10:05:26.115Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:26.123Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:26.123Z
2024-06-14T10:05:26.170Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:26.249Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:26.249Z
2024-06-14T10:05:26.386Z [INFO]  backend/local: plan calling Plan
2024-06-14T10:05:26.408Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:26.417Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:26.416Z
2024-06-14T10:05:26.463Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:05:26.540Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:05:26.540Z
2024-06-14T10:05:26.656Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: Retrieved credentials: tf_aws.credentials_source=EnvConfigCredentials tf_provider_addr=registry.terraform.io/hashicorp/aws tf_req_id=48474c25-7bdb-346d-e22a-3782a8208886 tf_rpc=ConfigureProvider @caller=github.com/hashicorp/aws-sdk-go-base/v2@v2.0.0-beta.52/logging/tf_logger.go:39 tf_mux_provider="*schema.GRPCProviderServer" @module=aws.aws-base timestamp=2024-06-14T10:05:26.656Z
2024-06-14T10:05:27.528Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: Retrieved caller identity from STS: tf_mux_provider="*schema.GRPCProviderServer" tf_provider_addr=registry.terraform.io/hashicorp/aws tf_req_id=48474c25-7bdb-346d-e22a-3782a8208886 tf_rpc=ConfigureProvider @module=aws.aws-base @caller=github.com/hashicorp/aws-sdk-go-base/v2@v2.0.0-beta.52/logging/tf_logger.go:39 timestamp=2024-06-14T10:05:27.528Z
2024-06-14T10:05:27.537Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_iam_policy.certbot_policy, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .path: planned value cty.StringVal("/") for a non-computed attribute
      - .policy: planned value cty.StringVal("{\"Statement\":[{\"Action\":[\"route53:ListHostedZones\",\"route53:GetChange\",\"route53:ChangeResourceRecordSets\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}") does not match config value cty.StringVal("{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"route53:ListHostedZones\",\n        \"route53:GetChange\",\n        \"route53:ChangeResourceRecordSets\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n")
2024-06-14T10:05:27.538Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_iam_role.certbot_role, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .assume_role_policy: planned value cty.StringVal("{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}") does not match config value cty.StringVal("{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n")
      - .path: planned value cty.StringVal("/") for a non-computed attribute
      - .force_detach_policies: planned value cty.False for a non-computed attribute
      - .max_session_duration: planned value cty.NumberIntVal(3600) for a non-computed attribute
      - .inline_policy: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-14T10:05:27.541Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_iam_instance_profile.certbot_profile, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .path: planned value cty.StringVal("/") for a non-computed attribute
2024-06-14T10:05:27.542Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_security_group.security-group["K8S_SECURITY_GROUP"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .egress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("-1"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(0)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("-1"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(0)})})
      - .ingress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("K8s port"), "from_port":cty.NumberIntVal(6443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(6443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(22)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("K8s port"), "from_port":cty.NumberIntVal(6443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(6443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(22)})})
      - .revoke_rules_on_delete: planned value cty.False for a non-computed attribute
2024-06-14T10:05:27.544Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_security_group.security-group["NGINX_SECURITY_GROUP"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .egress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("-1"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(0)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("-1"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(0)})})
      - .revoke_rules_on_delete: planned value cty.False for a non-computed attribute
      - .ingress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Minio console port"), "from_port":cty.NumberIntVal(9000), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(9000)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Postgres port"), "from_port":cty.NumberIntVal(5432), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(5432)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(22)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Minio console port"), "from_port":cty.NumberIntVal(9000), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(9000)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Postgres port"), "from_port":cty.NumberIntVal(5432), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(5432)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(22)})})
2024-06-14T10:05:27.554Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_instance.K8S_CLUSTER_EC2_INSTANCE[0], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .get_password_data: planned value cty.False for a non-computed attribute
      - .user_data_replace_on_change: planned value cty.False for a non-computed attribute
      - .vpc_security_group_ids: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
      - .source_dest_check: planned value cty.True for a non-computed attribute
      - .cpu_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .maintenance_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .metadata_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .enclave_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ephemeral_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .capacity_reservation_specification: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ebs_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .private_dns_name_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .instance_market_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .network_interface: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-14T10:05:27.555Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_instance.NGINX_EC2_INSTANCE, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .user_data: planned value cty.StringVal("e92047caf1cada118ed02157365218796551bf40") does not match config value cty.StringVal("#!/bin/bash\n\n# Log file path\necho \"[ Set Log File ] : \"\nLOG_FILE=\"/tmp/ebs-volume-mount.log\"\n\n# Redirect stdout and stderr to log file\nexec > >(tee -a \"$LOG_FILE\") 2>&1\n\n# set commands for error handling.\nset -e\nset -o errexit   ## set -e : exit the script if any statement returns a non-true return value\nset -o nounset   ## set -u : exit the script if you try to use an uninitialised variable\nset -o errtrace  # trace ERR through 'time command' and other functions\nset -o pipefail  # trace ERR through pipes\n\n## Mount EBS volume\necho \"[ Mount EBS volume to /srv/nfs directory ] : \"\nfile -s /dev/xvdb\nmkfs -t xfs /dev/xvdb\nmkdir -p /srv/nfs\necho \"/dev/xvdb    /srv/nfs xfs  defaults,nofail  0  2\" >> /etc/fstab\nmount -a\n")
      - .user_data_replace_on_change: planned value cty.False for a non-computed attribute
      - .vpc_security_group_ids: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
      - .source_dest_check: planned value cty.True for a non-computed attribute
      - .get_password_data: planned value cty.False for a non-computed attribute
      - .capacity_reservation_specification: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .enclave_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ephemeral_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .instance_market_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .network_interface: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .private_dns_name_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .cpu_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .maintenance_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .metadata_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-14T10:05:27.562Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_route53_record.MAP_DNS_TO_IP["API_INTERNAL_DNS"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .records: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
2024-06-14T10:05:27.563Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_route53_record.MAP_DNS_TO_IP["API_DNS"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .records: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
2024-06-14T10:05:27.592Z [INFO]  backend/local: plan operation completed
2024-06-14T10:12:08.170Z [INFO]  Terraform version: 1.8.5
2024-06-14T10:12:08.170Z [INFO]  Go runtime version: go1.22.1
2024-06-14T10:12:08.170Z [INFO]  CLI args: []string{"/home/runner/work/_temp/8e8bcfe7-9db8-49b8-bfdc-13426773cd31/terraform-bin", "fmt", "-recursive"}
2024-06-14T10:12:08.170Z [INFO]  CLI command args: []string{"fmt", "-recursive"}
2024-06-14T10:12:08.520Z [INFO]  Terraform version: 1.8.5
2024-06-14T10:12:08.520Z [INFO]  Go runtime version: go1.22.1
2024-06-14T10:12:08.520Z [INFO]  CLI args: []string{"/home/runner/work/_temp/8e8bcfe7-9db8-49b8-bfdc-13426773cd31/terraform-bin", "init"}
2024-06-14T10:12:08.521Z [INFO]  CLI command args: []string{"init"}
2024-06-14T10:12:12.067Z [INFO]  Terraform version: 1.8.5
2024-06-14T10:12:12.067Z [INFO]  Go runtime version: go1.22.1
2024-06-14T10:12:12.067Z [INFO]  CLI args: []string{"/home/runner/work/_temp/8e8bcfe7-9db8-49b8-bfdc-13426773cd31/terraform-bin", "validate", "-no-color"}
2024-06-14T10:12:12.068Z [INFO]  CLI command args: []string{"validate", "-no-color"}
2024-06-14T10:12:12.434Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:12.511Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:12.510Z
2024-06-14T10:12:13.133Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:13.141Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:13.141Z
2024-06-14T10:12:13.198Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:13.206Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:13.206Z
2024-06-14T10:12:13.253Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:13.327Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:13.327Z
2024-06-14T10:12:13.611Z [INFO]  Terraform version: 1.8.5
2024-06-14T10:12:13.611Z [INFO]  Go runtime version: go1.22.1
2024-06-14T10:12:13.611Z [INFO]  CLI args: []string{"/home/runner/work/_temp/8e8bcfe7-9db8-49b8-bfdc-13426773cd31/terraform-bin", "plan", "-no-color", "-input=false", "-var-file=./env.tfvars"}
2024-06-14T10:12:13.611Z [INFO]  CLI command args: []string{"plan", "-no-color", "-input=false", "-var-file=./env.tfvars"}
2024-06-14T10:12:13.976Z [INFO]  backend/local: starting Plan operation
2024-06-14T10:12:13.981Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:14.063Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:14.062Z
2024-06-14T10:12:14.701Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:14.709Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:14.709Z
2024-06-14T10:12:14.765Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:14.773Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:14.773Z
2024-06-14T10:12:14.820Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:14.896Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:14.896Z
2024-06-14T10:12:15.038Z [INFO]  backend/local: plan calling Plan
2024-06-14T10:12:15.044Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:15.052Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:15.052Z
2024-06-14T10:12:15.100Z [INFO]  provider: configuring client automatic mTLS
2024-06-14T10:12:15.177Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-14T10:12:15.177Z
2024-06-14T10:12:15.290Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: Retrieved credentials: @caller=github.com/hashicorp/aws-sdk-go-base/v2@v2.0.0-beta.52/logging/tf_logger.go:39 tf_aws.credentials_source=EnvConfigCredentials tf_mux_provider="*schema.GRPCProviderServer" tf_provider_addr=registry.terraform.io/hashicorp/aws tf_rpc=ConfigureProvider @module=aws.aws-base tf_req_id=981aac4a-c5f5-b8fc-9cee-860f17a9ac10 timestamp=2024-06-14T10:12:15.290Z
2024-06-14T10:12:16.256Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: Retrieved caller identity from STS: @caller=github.com/hashicorp/aws-sdk-go-base/v2@v2.0.0-beta.52/logging/tf_logger.go:39 @module=aws.aws-base tf_req_id=981aac4a-c5f5-b8fc-9cee-860f17a9ac10 tf_provider_addr=registry.terraform.io/hashicorp/aws tf_rpc=ConfigureProvider tf_mux_provider="*schema.GRPCProviderServer" timestamp=2024-06-14T10:12:16.256Z
2024-06-14T10:12:16.267Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_iam_policy.certbot_policy, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .policy: planned value cty.StringVal("{\"Statement\":[{\"Action\":[\"route53:ListHostedZones\",\"route53:GetChange\",\"route53:ChangeResourceRecordSets\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}") does not match config value cty.StringVal("{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"route53:ListHostedZones\",\n        \"route53:GetChange\",\n        \"route53:ChangeResourceRecordSets\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n")
      - .path: planned value cty.StringVal("/") for a non-computed attribute
2024-06-14T10:12:16.267Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_iam_role.certbot_role, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .path: planned value cty.StringVal("/") for a non-computed attribute
      - .force_detach_policies: planned value cty.False for a non-computed attribute
      - .max_session_duration: planned value cty.NumberIntVal(3600) for a non-computed attribute
      - .assume_role_policy: planned value cty.StringVal("{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}") does not match config value cty.StringVal("{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n")
      - .inline_policy: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-14T10:12:16.270Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_iam_instance_profile.certbot_profile, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .path: planned value cty.StringVal("/") for a non-computed attribute
2024-06-14T10:12:16.271Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_security_group.security-group["K8S_SECURITY_GROUP"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .ingress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("K8s port"), "from_port":cty.NumberIntVal(6443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(6443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(22)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("K8s port"), "from_port":cty.NumberIntVal(6443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(6443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(22)})})
      - .revoke_rules_on_delete: planned value cty.False for a non-computed attribute
      - .egress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("-1"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(0)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("-1"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(0)})})
2024-06-14T10:12:16.273Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_security_group.security-group["NGINX_SECURITY_GROUP"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .ingress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Minio console port"), "from_port":cty.NumberIntVal(9000), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(9000)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Postgres port"), "from_port":cty.NumberIntVal(5432), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(5432)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(22)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Minio console port"), "from_port":cty.NumberIntVal(9000), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(9000)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Postgres port"), "from_port":cty.NumberIntVal(5432), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(5432)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(22)})})
      - .revoke_rules_on_delete: planned value cty.False for a non-computed attribute
      - .egress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("-1"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(0)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("-1"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(0)})})
2024-06-14T10:12:16.285Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_instance.K8S_CLUSTER_EC2_INSTANCE[0], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .user_data_replace_on_change: planned value cty.False for a non-computed attribute
      - .source_dest_check: planned value cty.True for a non-computed attribute
      - .get_password_data: planned value cty.False for a non-computed attribute
      - .vpc_security_group_ids: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
      - .metadata_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .network_interface: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .capacity_reservation_specification: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .cpu_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ebs_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .enclave_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .maintenance_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .private_dns_name_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ephemeral_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .instance_market_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-14T10:12:16.286Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_instance.NGINX_EC2_INSTANCE, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .get_password_data: planned value cty.False for a non-computed attribute
      - .user_data: planned value cty.StringVal("e92047caf1cada118ed02157365218796551bf40") does not match config value cty.StringVal("#!/bin/bash\n\n# Log file path\necho \"[ Set Log File ] : \"\nLOG_FILE=\"/tmp/ebs-volume-mount.log\"\n\n# Redirect stdout and stderr to log file\nexec > >(tee -a \"$LOG_FILE\") 2>&1\n\n# set commands for error handling.\nset -e\nset -o errexit   ## set -e : exit the script if any statement returns a non-true return value\nset -o nounset   ## set -u : exit the script if you try to use an uninitialised variable\nset -o errtrace  # trace ERR through 'time command' and other functions\nset -o pipefail  # trace ERR through pipes\n\n## Mount EBS volume\necho \"[ Mount EBS volume to /srv/nfs directory ] : \"\nfile -s /dev/xvdb\nmkfs -t xfs /dev/xvdb\nmkdir -p /srv/nfs\necho \"/dev/xvdb    /srv/nfs xfs  defaults,nofail  0  2\" >> /etc/fstab\nmount -a\n")
      - .vpc_security_group_ids: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
      - .source_dest_check: planned value cty.True for a non-computed attribute
      - .user_data_replace_on_change: planned value cty.False for a non-computed attribute
      - .ephemeral_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .instance_market_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .metadata_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .enclave_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .maintenance_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .network_interface: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .capacity_reservation_specification: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .cpu_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .private_dns_name_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-14T10:12:16.291Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_route53_record.MAP_DNS_TO_IP["API_DNS"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .records: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
2024-06-14T10:12:16.292Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_route53_record.MAP_DNS_TO_IP["API_INTERNAL_DNS"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .records: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
2024-06-14T10:12:16.318Z [INFO]  backend/local: plan operation completed
