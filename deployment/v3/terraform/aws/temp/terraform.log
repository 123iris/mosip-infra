2024-06-13T12:21:03.016Z [INFO]  Terraform version: 1.8.5
2024-06-13T12:21:03.016Z [INFO]  Go runtime version: go1.22.1
2024-06-13T12:21:03.016Z [INFO]  CLI args: []string{"/home/runner/work/_temp/e37bdb5f-9b21-4ef5-a9b8-1f701480d623/terraform-bin", "fmt"}
2024-06-13T12:21:03.017Z [INFO]  CLI command args: []string{"fmt"}
2024-06-13T12:21:03.160Z [INFO]  Terraform version: 1.8.5
2024-06-13T12:21:03.160Z [INFO]  Go runtime version: go1.22.1
2024-06-13T12:21:03.160Z [INFO]  CLI args: []string{"/home/runner/work/_temp/e37bdb5f-9b21-4ef5-a9b8-1f701480d623/terraform-bin", "init"}
2024-06-13T12:21:03.161Z [INFO]  CLI command args: []string{"init"}
2024-06-13T12:21:06.710Z [INFO]  Terraform version: 1.8.5
2024-06-13T12:21:06.710Z [INFO]  Go runtime version: go1.22.1
2024-06-13T12:21:06.710Z [INFO]  CLI args: []string{"/home/runner/work/_temp/e37bdb5f-9b21-4ef5-a9b8-1f701480d623/terraform-bin", "validate", "-no-color"}
2024-06-13T12:21:06.711Z [INFO]  CLI command args: []string{"validate", "-no-color"}
2024-06-13T12:21:07.078Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:07.166Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:07.166Z
2024-06-13T12:21:07.793Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:07.802Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:07.802Z
2024-06-13T12:21:07.872Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:07.881Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:07.881Z
2024-06-13T12:21:07.928Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:08.004Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:08.004Z
2024-06-13T12:21:08.275Z [INFO]  Terraform version: 1.8.5
2024-06-13T12:21:08.275Z [INFO]  Go runtime version: go1.22.1
2024-06-13T12:21:08.275Z [INFO]  CLI args: []string{"/home/runner/work/_temp/e37bdb5f-9b21-4ef5-a9b8-1f701480d623/terraform-bin", "plan", "-no-color", "-input=false", "-var-file=./cluster.tfvars"}
2024-06-13T12:21:08.275Z [INFO]  CLI command args: []string{"plan", "-no-color", "-input=false", "-var-file=./cluster.tfvars"}
2024-06-13T12:21:08.639Z [INFO]  backend/local: starting Plan operation
2024-06-13T12:21:08.643Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:08.727Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:08.727Z
2024-06-13T12:21:09.399Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:09.408Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:09.408Z
2024-06-13T12:21:09.465Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:09.473Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:09.473Z
2024-06-13T12:21:09.521Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:09.597Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:09.597Z
2024-06-13T12:21:09.727Z [INFO]  backend/local: plan calling Plan
2024-06-13T12:21:09.733Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:09.742Z [INFO]  provider.terraform-provider-null_v3.2.2_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:09.742Z
2024-06-13T12:21:09.789Z [INFO]  provider: configuring client automatic mTLS
2024-06-13T12:21:09.866Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: configuring server automatic mTLS: timestamp=2024-06-13T12:21:09.866Z
2024-06-13T12:21:09.970Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: Retrieved credentials: tf_aws.credentials_source=EnvConfigCredentials tf_provider_addr=registry.terraform.io/hashicorp/aws tf_rpc=ConfigureProvider @caller=github.com/hashicorp/aws-sdk-go-base/v2@v2.0.0-beta.52/logging/tf_logger.go:39 @module=aws.aws-base tf_mux_provider="*schema.GRPCProviderServer" tf_req_id=c4033359-a7be-2a8a-c0c0-09a950a8c96b timestamp=2024-06-13T12:21:09.970Z
2024-06-13T12:21:10.932Z [INFO]  provider.terraform-provider-aws_v5.48.0_x5: Retrieved caller identity from STS: @module=aws.aws-base tf_provider_addr=registry.terraform.io/hashicorp/aws tf_rpc=ConfigureProvider @caller=github.com/hashicorp/aws-sdk-go-base/v2@v2.0.0-beta.52/logging/tf_logger.go:39 tf_mux_provider="*schema.GRPCProviderServer" tf_req_id=c4033359-a7be-2a8a-c0c0-09a950a8c96b timestamp=2024-06-13T12:21:10.932Z
2024-06-13T12:21:10.949Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_iam_policy.certbot_policy, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .policy: planned value cty.StringVal("{\"Statement\":[{\"Action\":[\"route53:ListHostedZones\",\"route53:GetChange\",\"route53:ChangeResourceRecordSets\"],\"Effect\":\"Allow\",\"Resource\":\"*\"}],\"Version\":\"2012-10-17\"}") does not match config value cty.StringVal("{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"route53:ListHostedZones\",\n        \"route53:GetChange\",\n        \"route53:ChangeResourceRecordSets\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n")
      - .path: planned value cty.StringVal("/") for a non-computed attribute
2024-06-13T12:21:10.949Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_iam_role.certbot_role, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .force_detach_policies: planned value cty.False for a non-computed attribute
      - .max_session_duration: planned value cty.NumberIntVal(3600) for a non-computed attribute
      - .path: planned value cty.StringVal("/") for a non-computed attribute
      - .assume_role_policy: planned value cty.StringVal("{\"Statement\":[{\"Action\":\"sts:AssumeRole\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"}}],\"Version\":\"2012-10-17\"}") does not match config value cty.StringVal("{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Action\": \"sts:AssumeRole\"\n    }\n  ]\n}\n")
      - .inline_policy: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-13T12:21:10.953Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_iam_instance_profile.certbot_profile, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .path: planned value cty.StringVal("/") for a non-computed attribute
2024-06-13T12:21:10.955Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_security_group.security-group["K8S_SECURITY_GROUP"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .egress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("-1"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(0)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("-1"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(0)})})
      - .revoke_rules_on_delete: planned value cty.False for a non-computed attribute
      - .ingress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("K8s port"), "from_port":cty.NumberIntVal(6443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(6443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(22)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("K8s port"), "from_port":cty.NumberIntVal(6443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(6443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(22)})})
2024-06-13T12:21:10.955Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_security_group.security-group["NGINX_SECURITY_GROUP"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .egress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("-1"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(0)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Rules which allow the incoming traffic to the instances associated with the security group."), "from_port":cty.NumberIntVal(0), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("-1"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(0)})})
      - .revoke_rules_on_delete: planned value cty.False for a non-computed attribute
      - .ingress: planned value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Minio console port"), "from_port":cty.NumberIntVal(9000), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(9000)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Postgres port"), "from_port":cty.NumberIntVal(5432), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(5432)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.ListValEmpty(cty.String), "protocol":cty.StringVal("tcp"), "security_groups":cty.SetValEmpty(cty.String), "self":cty.False, "to_port":cty.NumberIntVal(22)})}) does not match config value cty.SetVal([]cty.Value{cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTP port"), "from_port":cty.NumberIntVal(80), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(80)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("HTTPS port"), "from_port":cty.NumberIntVal(443), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(443)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Minio console port"), "from_port":cty.NumberIntVal(9000), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(9000)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("Postgres port"), "from_port":cty.NumberIntVal(5432), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(5432)}), cty.ObjectVal(map[string]cty.Value{"cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("0.0.0.0/0")}), "description":cty.StringVal("SSH login port"), "from_port":cty.NumberIntVal(22), "ipv6_cidr_blocks":cty.ListVal([]cty.Value{cty.StringVal("::/0")}), "prefix_list_ids":cty.NullVal(cty.List(cty.String)), "protocol":cty.StringVal("TCP"), "security_groups":cty.NullVal(cty.Set(cty.String)), "self":cty.NullVal(cty.Bool), "to_port":cty.NumberIntVal(22)})})
2024-06-13T12:21:10.966Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_instance.NGINX_EC2_INSTANCE, but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .user_data_replace_on_change: planned value cty.False for a non-computed attribute
      - .source_dest_check: planned value cty.True for a non-computed attribute
      - .vpc_security_group_ids: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
      - .user_data: planned value cty.StringVal("e92047caf1cada118ed02157365218796551bf40") does not match config value cty.StringVal("#!/bin/bash\n\n# Log file path\necho \"[ Set Log File ] : \"\nLOG_FILE=\"/tmp/ebs-volume-mount.log\"\n\n# Redirect stdout and stderr to log file\nexec > >(tee -a \"$LOG_FILE\") 2>&1\n\n# set commands for error handling.\nset -e\nset -o errexit   ## set -e : exit the script if any statement returns a non-true return value\nset -o nounset   ## set -u : exit the script if you try to use an uninitialised variable\nset -o errtrace  # trace ERR through 'time command' and other functions\nset -o pipefail  # trace ERR through pipes\n\n## Mount EBS volume\necho \"[ Mount EBS volume to /srv/nfs directory ] : \"\nfile -s /dev/xvdb\nmkfs -t xfs /dev/xvdb\nmkdir -p /srv/nfs\necho \"/dev/xvdb    /srv/nfs xfs  defaults,nofail  0  2\" >> /etc/fstab\nmount -a\n")
      - .get_password_data: planned value cty.False for a non-computed attribute
      - .cpu_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .enclave_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ephemeral_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .private_dns_name_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .capacity_reservation_specification: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .instance_market_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .metadata_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .network_interface: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .maintenance_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-13T12:21:10.968Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_instance.K8S_CLUSTER_EC2_INSTANCE[0], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .user_data_replace_on_change: planned value cty.False for a non-computed attribute
      - .source_dest_check: planned value cty.True for a non-computed attribute
      - .vpc_security_group_ids: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
      - .get_password_data: planned value cty.False for a non-computed attribute
      - .maintenance_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ephemeral_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .cpu_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ebs_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .enclave_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .metadata_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .network_interface: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .private_dns_name_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .capacity_reservation_specification: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .instance_market_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-13T12:21:10.968Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_instance.K8S_CLUSTER_EC2_INSTANCE[1], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .get_password_data: planned value cty.False for a non-computed attribute
      - .user_data_replace_on_change: planned value cty.False for a non-computed attribute
      - .source_dest_check: planned value cty.True for a non-computed attribute
      - .vpc_security_group_ids: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
      - .cpu_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ebs_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .enclave_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .ephemeral_block_device: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .capacity_reservation_specification: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .instance_market_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .metadata_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .network_interface: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .private_dns_name_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
      - .maintenance_options: attribute representing nested block must not be unknown itself; set nested attribute values to unknown instead
2024-06-13T12:21:10.979Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_route53_record.MAP_DNS_TO_IP["API_DNS"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .records: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
2024-06-13T12:21:10.984Z [WARN]  Provider "registry.terraform.io/hashicorp/aws" produced an invalid plan for module.aws-resource-creation.aws_route53_record.MAP_DNS_TO_IP["API_INTERNAL_DNS"], but we are tolerating it because it is using the legacy plugin SDK.
    The following problems may be the cause of any confusing errors from downstream operations:
      - .records: planned value cty.UnknownVal(cty.Set(cty.String)) does not match config value cty.SetVal([]cty.Value{cty.UnknownVal(cty.String)})
2024-06-13T12:21:11.015Z [INFO]  backend/local: plan operation completed
